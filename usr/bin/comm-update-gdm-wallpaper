#!/usr/bin/env python3

"""
GDM Wallpaper Updater
This script updates the GDM login screen to use the current user's wallpaper.
It also checks for gdm-settings conflicts.
"""

import os
import sys
import subprocess
import shutil
import tempfile
import logging

# Configure logging
logging.basicConfig(
    filename='/var/log/gdm-wallpaper-updater.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def run_command(cmd, shell=False):
    """Execute command and return output or None on error"""
    try:
        if shell:
            result = subprocess.run(cmd, shell=True, check=True, text=True, capture_output=True)
        else:
            result = subprocess.run(cmd, check=True, text=True, capture_output=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        logging.error(f"Error executing command: {cmd}")
        logging.error(f"Error: {e}")
        logging.error(f"Output: {e.stderr}")
        return None
    except Exception as e:
        logging.error(f"Unexpected error executing: {cmd}")
        logging.error(f"Exception: {str(e)}")
        return None

def is_gdm_settings_installed():
    """Check if gdm-settings is installed"""
    try:
        # Check if gdm-settings package is installed (Arch/Manjaro)
        result = run_command("pacman -Qi gdm-settings", shell=True)
        if result is not None:
            return True
            
        # Check if gdm-settings binary exists
        if os.path.exists("/usr/bin/gdm-settings"):
            return True
            
        return False
    except Exception as e:
        logging.error(f"Error checking gdm-settings: {str(e)}")
        return False

def restore_default_theme():
    """Restore the default GDM theme when gdm-settings is present"""
    try:
        default_theme = "/usr/share/gnome-shell/gnome-shell-theme.gresource.default"
        current_theme = "/usr/share/gnome-shell/gnome-shell-theme.gresource"
        
        if os.path.exists(default_theme):
            shutil.copy(default_theme, current_theme)
            os.chmod(current_theme, 0o644)
            logging.info("Default GDM theme restored due to gdm-settings presence")
            return True
        else:
            logging.warning("Default theme backup not found")
            return False
    except Exception as e:
        logging.error(f"Error restoring default theme: {str(e)}")
        return False

def get_display_for_user(user):
    """Try to find the DISPLAY associated with a user session"""
    try:
        sessions = run_command("loginctl list-sessions --no-legend", shell=True)
        if not sessions:
            return ":0"  # fallback
        for line in sessions.splitlines():
            parts = line.split()
            if len(parts) >= 3 and parts[2] == user:
                session_id = parts[0]
                display_info = run_command(f"loginctl show-session {session_id} -p Display", shell=True)
                if display_info and "=" in display_info:
                    display = display_info.split("=")[1].strip()
                    if display:
                        return display
        return ":0"  # fallback
    except Exception as e:
        logging.error(f"Failed to determine display from loginctl: {e}")
        return ":0"

def main():
    logging.info("Starting GDM theme update")
    
    # Check if gdm-settings is installed
    if is_gdm_settings_installed():
        logging.info("gdm-settings detected - skipping wallpaper update and restoring default theme")
        restore_default_theme()
        return
    
    # Check if running as root
    if os.geteuid() != 0:
        logging.error("This script must be run as root")
        print("This script must be run as root")
        sys.exit(1)
    
    # Create temporary directory
    temp_dir = tempfile.mkdtemp()
    try:
        # Get user session information
        current_user = run_command("who | awk '!/ tty/ {print $1}' | head -1", shell=True)
        if not current_user:
            logging.error("Could not determine current user")
            return
        
        display = get_display_for_user(current_user)
        if not display:
            logging.error("Could not determine display")
            return
        
        # Get wallpaper file
        wallpaper = run_command(f"su - {current_user} -c \"DISPLAY={display} dconf read /org/gnome/desktop/background/picture-uri\" | tr -d \"'\"", shell=True)
        if not wallpaper:
            # Try dark theme wallpaper
            wallpaper = run_command(f"su - {current_user} -c \"DISPLAY={display} dconf read /org/gnome/desktop/background/picture-uri-dark\" | tr -d \"'\"", shell=True)
            
        if not wallpaper:
            logging.error("Could not get wallpaper path")
            return
            
        # Remove file:// prefix
        wallpaper_file = wallpaper.replace("file://", "")
        logging.info(f"Found wallpaper: {wallpaper_file}")
        
        # Copy and extract resources
        os.chdir(temp_dir)
        shutil.copy("/usr/share/gnome-shell/gnome-shell-theme.gresource", temp_dir)
        
        # List and extract resources
        resources = run_command("gresource list gnome-shell-theme.gresource", shell=True)
        if not resources:
            logging.error("Failed to list resources")
            return
            
        for resource in resources.splitlines():
            output_file = resource.replace("/org/gnome/shell/theme/", "")
            run_command(f"gresource extract gnome-shell-theme.gresource {resource} > {output_file}", shell=True)
        
        # Convert or copy wallpaper
        if wallpaper_file.lower().endswith('.avif'):
            run_command(f"convert \"{wallpaper_file}\" fundo.jpg", shell=True)
        else:
            shutil.copy(wallpaper_file, "fundo.jpg")
        
        # Create resource XML
        xml_content = """<?xml version="1.0" encoding="UTF-8"?>
<gresources>
  <gresource prefix="/org/gnome/shell/theme">
    <file>fundo.jpg</file>
    <file>calendar-today-light.svg</file>
    <file>calendar-today.svg</file>
    <file>checkbox-focused.svg</file>
    <file>checkbox-off-focused-light.svg</file>
    <file>checkbox-off-focused.svg</file>
    <file>checkbox-off-light.svg</file>
    <file>checkbox-off.svg</file>
    <file>checkbox.svg</file>
    <file>gnome-shell-dark.css</file>
    <file>gnome-shell-high-contrast.css</file>
    <file>gnome-shell-light.css</file>
    <file>gnome-shell-start.svg</file>
    <file>pad-osd.css</file>
    <file>process-working-dark.svg</file>
    <file>process-working-light.svg</file>
    <file>toggle-off-light.svg</file>
    <file>toggle-off.svg</file>
    <file>toggle-on-light.svg</file>
    <file>toggle-on.svg</file>
    <file>workspace-placeholder.svg</file>
  </gresource>
</gresources>"""
        
        with open("gnome-shell-theme.gresource.xml", "w") as f:
            f.write(xml_content)
        
        # Compile and install
        result = run_command("glib-compile-resources gnome-shell-theme.gresource.xml", shell=True)
        if result is None:
            logging.error("Failed to compile resources")
            return
        
        # Backup original if needed
        if not os.path.exists("/usr/share/gnome-shell/gnome-shell-theme.gresource.default"):
            if os.path.exists("/usr/share/gnome-shell/gnome-shell-theme.gresource"):
                shutil.copy("/usr/share/gnome-shell/gnome-shell-theme.gresource", 
                           "/usr/share/gnome-shell/gnome-shell-theme.gresource.default")
        
        # Save backup copy for package
        shutil.copy("gnome-shell-theme.gresource", "/usr/share/gnome-shell/gnome-shell-theme.gresource.big")
        
        # Install new theme only if gdm-settings is not present
        if not is_gdm_settings_installed():
            shutil.copy("gnome-shell-theme.gresource", "/usr/share/gnome-shell/gnome-shell-theme.gresource")
            logging.info("GDM theme successfully updated")
        else:
            logging.info("gdm-settings detected after processing - theme not applied")
        
    except Exception as e:
        logging.error(f"Error updating GDM theme: {str(e)}")
    finally:
        # Clean up
        shutil.rmtree(temp_dir, ignore_errors=True)

if __name__ == "__main__":
    main()