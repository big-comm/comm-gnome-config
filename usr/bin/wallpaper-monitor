#!/usr/bin/env python3

"""
BigCommunity Wallpaper Monitor Service
This script monitors the user's desktop wallpaper and updates the GDM login screen
when the wallpaper changes. Optimized for BigCommunity distro.
"""

import os
import sys
import time
import subprocess
import logging
import signal

# Configure logging
logging.basicConfig(
    filename='/var/log/wallpaper-monitor.log',
    level=logging.INFO,
    format='%(asctime)s - BigCommunity - %(levelname)s - %(message)s'
)

# Global variable for execution control
running = True

# Lock file to coordinate with other scripts
LOCK_FILE = "/var/lock/gdm-theme-operations.lock"

def signal_handler(sig, frame):
    """Signal handler for safe shutdown"""
    global running
    logging.info(f"Signal received: {sig}")
    running = False

def acquire_lock(timeout=10):
    """Acquire lock to coordinate with other scripts"""
    try:
        lock_fd = os.open(LOCK_FILE, os.O_CREAT | os.O_WRONLY | os.O_EXCL)
        os.write(lock_fd, str(os.getpid()).encode())
        return lock_fd
    except OSError:
        count = 0
        while count < timeout:
            try:
                lock_fd = os.open(LOCK_FILE, os.O_CREAT | os.O_WRONLY | os.O_EXCL)
                os.write(lock_fd, str(os.getpid()).encode())
                return lock_fd
            except OSError:
                time.sleep(1)
                count += 1
        return None

def release_lock(lock_fd):
    """Release the lock"""
    try:
        if lock_fd is not None:
            os.close(lock_fd)
            os.unlink(LOCK_FILE)
    except:
        pass

def run_command(cmd, shell=False):
    """Execute command and return output or None on error"""
    try:
        if shell:
            result = subprocess.run(cmd, shell=True, check=True, text=True, capture_output=True)
        else:
            result = subprocess.run(cmd, check=True, text=True, capture_output=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        logging.error(f"Error executing command: {cmd}")
        logging.error(f"Error: {e}")
        logging.error(f"Output: {e.stderr}")
        return None
    except Exception as e:
        logging.error(f"Unexpected error executing: {cmd}")
        logging.error(f"Exception: {str(e)}")
        return None

def is_gdm_settings_installed():
    """Check if gdm-settings is installed"""
    try:
        result = run_command("pacman -Qi gdm-settings", shell=True)
        if result is not None:
            return True
        if os.path.exists("/usr/bin/gdm-settings"):
            return True
        return False
    except Exception as e:
        logging.error(f"Error checking gdm-settings: {str(e)}")
        return False

def should_monitor_wallpaper():
    """Check if we should monitor wallpaper (gdm-settings not installed)"""
    if is_gdm_settings_installed():
        return False
    
    # Check if our theme files exist
    if not os.path.exists("/usr/share/gnome-shell/gnome-shell-theme.gresource.default"):
        logging.warning("BigCommunity: Default theme backup not found")
        return False
    
    return True

def get_active_session():
    """Get active session that isn't gdm"""
    try:
        for attempt in range(3):
            try:
                output = subprocess.run(['loginctl', 'list-sessions'], 
                                     check=True, text=True, capture_output=True).stdout.strip()
                
                for line in output.splitlines()[1:]:  # Skip header
                    parts = line.split()
                    if len(parts) >= 3 and parts[2] != "gdm" and "seat" in line:
                        return parts[0]  # Session ID
                return None
            except subprocess.CalledProcessError as e:
                if attempt < 2:
                    logging.warning(f"loginctl error (attempt {attempt+1}/3): {e.stderr.strip()}")
                    time.sleep(2)
                else:
                    logging.error(f"Failed to get session after 3 attempts: {e.stderr.strip()}")
                    return None
    except Exception as e:
        logging.error(f"Error getting active session: {str(e)}")
        return None

def get_session_user(session_id):
    """Get user from session"""
    if not session_id:
        return None
    return run_command(['loginctl', 'show-session', session_id, '-p', 'Name', '--value'])

def get_session_display(session_id):
    """Get display from session"""
    if not session_id:
        return None
    display = run_command(['loginctl', 'show-session', session_id, '-p', 'Display', '--value'])
    return display if display else ":0"

def get_dbus_address(user):
    """Get DBUS address for communication with user session"""
    if not user:
        return None
        
    try:
        pid = run_command(f"pgrep -u {user} gnome-session | head -n1", shell=True)
        if not pid:
            return None
            
        environ_file = f"/proc/{pid}/environ"
        if not os.path.exists(environ_file):
            return None
            
        with open(environ_file, 'rb') as f:
            environ = f.read().split(b'\0')
            
        for var in environ:
            var_str = var.decode('utf-8', errors='ignore')
            if var_str.startswith('DBUS_SESSION_BUS_ADDRESS='):
                return var_str.split('=', 1)[1]
        return None
    except Exception as e:
        logging.error(f"Error getting DBUS address: {str(e)}")
        return None

def get_user_wallpaper(user, display, dbus_address):
    """Get user's current wallpaper"""
    if not user or not display or not dbus_address:
        return None
        
    try:
        cmd = f"su - {user} -c 'DISPLAY={display} DBUS_SESSION_BUS_ADDRESS=\"{dbus_address}\" dconf read /org/gnome/desktop/background/picture-uri'"
        wallpaper_uri = run_command(cmd, shell=True)
        
        if not wallpaper_uri or wallpaper_uri == "''":
            cmd = f"su - {user} -c 'DISPLAY={display} DBUS_SESSION_BUS_ADDRESS=\"{dbus_address}\" dconf read /org/gnome/desktop/background/picture-uri-dark'"
            wallpaper_uri = run_command(cmd, shell=True)
            
        if not wallpaper_uri or wallpaper_uri == "''":
            return None
        return wallpaper_uri
    except Exception as e:
        logging.error(f"Error getting wallpaper: {str(e)}")
        return None

def main():
    """Main function to monitor wallpaper changes"""
    global running
    
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    
    if os.geteuid() != 0:
        logging.error("This script must be run as root")
        print("This script must be run as root")
        sys.exit(1)
    
    logging.info("BigCommunity wallpaper sync started")
    
    # Initial status check
    if should_monitor_wallpaper():
        logging.info("BigCommunity wallpaper sync active - monitoring enabled")
    else:
        logging.info("BigCommunity wallpaper sync in compatibility mode - gdm-settings detected")
    
    while running:
        try:
            # Check if we should continue monitoring
            if not should_monitor_wallpaper():
                logging.debug("Monitoring disabled - gdm-settings present")
                time.sleep(10)  # Check less frequently when disabled
                continue
            
            # Get active session
            session_id = get_active_session()
            if not session_id:
                logging.debug("No active session found")
                time.sleep(5)
                continue
            
            user = get_session_user(session_id)
            if not user:
                logging.debug(f"No user found for session {session_id}")
                time.sleep(5)
                continue
                
            display = get_session_display(session_id)
            dbus_address = get_dbus_address(user)
            if not dbus_address:
                logging.debug(f"Could not get DBUS address for user {user}")
                time.sleep(5)
                continue
                
            logging.debug(f"BigCommunity: Monitoring wallpaper for user {user}")
            
            old_wallpaper = None
            
            # Monitor this session
            while running and should_monitor_wallpaper():
                try:
                    if not get_active_session() == session_id:
                        logging.info(f"Session {session_id} is no longer active")
                        break
                        
                    new_wallpaper = get_user_wallpaper(user, display, dbus_address)
                    
                    if new_wallpaper != old_wallpaper:
                        logging.info(f"BigCommunity: Wallpaper changed to: {new_wallpaper}")
                        
                        # Acquire lock before updating theme
                        lock_fd = acquire_lock(5)
                        if lock_fd is not None:
                            try:
                                result = run_command(['/usr/bin/comm-update-gdm-wallpaper'])
                                if result is not None:
                                    old_wallpaper = new_wallpaper
                                    logging.info("BigCommunity: GDM wallpaper updated successfully")
                            finally:
                                release_lock(lock_fd)
                        else:
                            logging.warning("Could not acquire lock for theme update")
                                
                    time.sleep(5)
                    
                except Exception as e:
                    logging.error(f"Error during monitoring: {str(e)}")
                    break
                    
        except Exception as e:
            logging.error(f"Error in main loop: {str(e)}")
            
        time.sleep(5)
    
    logging.info("BigCommunity wallpaper sync stopped")

if __name__ == "__main__":
    main()